import cv2
import torch
import os
from utils_ema.camera_cv import *
from utils_ema.geometry_pose import *
from utils_ema.charuco import Charuco
from utils_ema.scene import Scene
from utils_ema.light_point import PointLight
from utils_ema.config_utils import load_yaml
from utils_ema.plot import plotter
from omegaconf import OmegaConf

# path = os.path.dirname(os.path.realpath(__file__))

class LightCalibLoader():

    def __init__(self, dataset_path):

        self.dataset_path = dataset_path
        config_path = os.path.join(self.dataset_path,"config.yaml")
        self.cfg = load_yaml(config_path)
        self.calib_cfg = load_yaml(self.cfg.paths.calib_yaml)

        sys.path.append(self.calib_cfg.paths.calib_dir)
        from load_calibration_data import CalibLoader



    
        cl = CalibLoader(self.calib_cfg.paths.save_dir)
        print(cl)
        exit(1)

        # if not os.path.exists(dataset_path): raise ValueError("Data calib directory do not exists")
        # self.cfg = cfg
        # self.light_calib_data = load_yaml(self.cfg.paths.light_calib_yaml)

    def get_point_lights(self):
        light_data = load_yaml(os.path.join(self.cfg.paths.save_dir, "point_lights.yaml"))
        point_lights = []
        for key, val in light_data['lights'].items():
            position= torch.tensor(val['position'])
            pl = PointLight(name=key, position=position, intensity=val['intensity'])
            point_lights.append(pl)
        return point_lights

    def get_scene_only_lights(self):
        scene = Scene(n_frames=1)

        point_lights = self.get_point_lights()
        scene.set_point_lights(point_lights)

        return scene

    def get_scene(self):
        sys.path.append( self.light_calib_data.paths.calib_dir )
        from load_calibration_data import CalibLoader
        cl = CalibLoader(self.light_calib_data.paths.results_final_dir)
        scene = cl.get_scene()

        point_lights = self.get_point_lights()
        scene.set_point_lights(point_lights)

        return scene
