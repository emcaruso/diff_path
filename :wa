import os
import sys
import argparse
import shutil
import omegaconf
import time

from utils_ema.aruco_pnp import ArucoPnP
from utils_ema.config_utils import load_yaml

script_dir = os.path.dirname(os.path.realpath(__file__))
calib_dir = os.path.abspath(script_dir+"/..")
configs_dir = os.path.abspath(os.path.join(calib_dir,  "configs"))
config_default = os.path.abspath(os.path.join(configs_dir, "config.yaml"))
sys.path.insert(1, calib_dir)

from load_calibration_data import *
from utils_ema.general import *
from utils_ema.blender_utils import *
from utils_ema.cv2_filestorage import *

from test_distortion import TestDistortion
from estimate_plane import PlaneEstimator
from generate_dataset_from_basler import DatsetGeneratorBasler

class program( ):

    def __init__( self, opt ):
        self.opt = opt
        self.set_configs()
        # self.set_blender_scene()

    def set_configs(self):
        self.cfg = load_yaml(self.opt.config_path)
        # self.cfg = omegaconf.OmegaConf.load(self.opt.config_path)
        if not os.path.isfile(self.cfg.paths.aruco_struct):
            self.cfg.paths.aruco_struct = None
        if not os.path.isdir(os.path.dirname(self.cfg.paths.save_dir)):
            os.makedirs(os.path.dirname(self.cfg.paths.save_dir))
        assert( os.path.isdir(self.cfg.paths.config_dir))
        assert( os.path.isdir(self.cfg.paths.scene_dir))
        assert( os.path.isdir(self.cfg.paths.calib_dir))
        assert( os.path.isdir(self.cfg.paths.config_dir))



    ## run
    def run( self ):

        # load blender file
        self.load_blend_file(self.cfg.paths.scene_dir)

        # intrinsics calibration
        if self.cfg.intrinsics_calibration.do:
            self.generate_data( cfg=self.cfg.intrinsics_calibration )
            self.calibrate_intrinsics( cfg=self.cfg.intrinsics_calibration )

    def calibrate_intrinsics( self, cfg ):

        if not cfg.calibration.do: return False

        print_hash("Calibration (intrinsics only)")

        p = cfg.paths.in_dir
        l = [ i for i in list(os.listdir(p)) if os.path.isdir(os.path.join(p,i)) ]
        for i in range(len(l)):
            self.update_yml( cfg=cfg, cam_id=i )
            os.system(script_dir +"/calibrate.sh "+ self.cfg.charuco_board)
        self.generate_intr_yml()

    def generate_data(self, cfg):

        if not cfg.generate_data.do: return False

        if self.cfg.env == "Blender":
            print_hash("generating the dataset for calibration with Blender")
            pass

        elif self.cfg.env == "Basler":
            print_hash("generating the dataset for calibration with Basler")
            dg = DatsetGeneratorBasler(cfg)
            dg.generate()

        else:
            raise TypeError(str(self.cfg.env)+" is not a valid env, type 'Blender' or 'Basler'")


    # def run_interactive( self ):

    #     # # choose env
    #     self.load_blend_file(self.cfg.paths.scene_dir)
    #     if self.cfg.env== "Basler":
    #         self.cfg.intr = ask_question("Do you want to calibrate intrinsics separately? ('y' or 'n') ", ["y","n"]) == "y"
    #     elif self.cfg.env == "Blender":
    #         self.cfg.intr = False

    #     if self.cfg.intr:
    #         # generate data
    #         if ask_question("Do you want to generate data for intrinsic calibration? ('y' or 'n') ", ["y","n"]) == "y":
    #             self.cfg.manual_intr = ask_question("1: manual, 2: automatic ", ["1","2"])=='1'
    #             self.generate_data(intrinsics=True)

    #         # calibrate intrinsics
    #         if ask_question("Do you want to calibrate intrinsics? ('y' or 'n') ", ["y","n"]) == "y":
    #             self.calibrate_intrinsics()

    #         self.cfg.intr = False

    #     if self.cfg.env == "Basler":
    #         # generate data
    #         if ask_question("Do you want to generate data for calibration? ('y' or 'n') ", ["y","n"]) == "y":
    #             self.cfg.manual = ask_question("1: manual, 2: automatic ", ["1","2"])=='1'
    #             self.generate_data(data_dir="images")

    #         if ask_question("Do you want to calibrate? ('y' or 'n') ", ["y","n"]) == "y":
    #             self.calibrate(fixed_intr=True)
    #             # self.calibrate()

    #     else:

    #         # # generate data
    #         if ask_question("Do you want to generate data for calibration? ('y' or 'n') ", ["y","n"]) == "y":
    #             self.generate_data(data_dir="images")

    #         # calibrate
    #         if ask_question("Do you want to calibrate? ('y' or 'n') ", ["y","n"]) == "y":
    #             self.calibrate()

    #     self.save_data()
    #     self.estimate_plane()
    #     self.test_distortion()
    #     self.validate_calib()


    ## core
    def estimate_plane( self ):
        print_hash("Estimate world plane")
        pe = PlaneEstimator(self.cfg)
        pe.run()

    def test_distortion( self ):
        print_hash("Test Distortion")
        tu = TestDistortion(self.cfg)
        tu.run()

    def validate_calib( self ):
        print_hash("Exporting cameras in blender: "+self.cfg.paths.save_scene)
        self.load_blend_file(self.cfg.paths.save_scene)
        if self.blend_file is not None:
        #     # launch_blender_script(self.blend_file, os.path.join(script_dir, "validate_calib_blender.py") +" "+self.cfg.dataset_name )
            launch_blender_script(self.blend_file, os.path.join(script_dir, "validate_calib_blender.py"), [self.cfg.paths.save_dir] )
        # print_hash("Checking projected grid")
        # os.system("python3 "+script_dir+"/validate_calib.py "+self.cfg.save_name)

    def load_blend_file(self, blend_dir):   
        self.blend_file = None
        if blend_dir != "":
            assert(os.path.isdir(blend_dir))
            self.blend_file = get_blend_file(blend_dir)
            assert(os.path.isfile(self.blend_file))
            print("Blender scene file: "+self.blend_file)

    def update_yml( self, cfg, cam_id=None ):

        yml_board = self.cfg.paths.charuco_board_path
        assert( os.path.isfile(yml_board))
        print("board config file: "+yml_board)

        if cfg.calibration.intr_start: fix_path = '"./MC-Calib/Data/intrinsics/calibrated_cameras_data.yml"'
        else: fix_path = '"None"'
        fix = str(int(cfg.calibration.fix_intr))

        if cam_id is not None:
            cam_str = "Cam_"+str(cam_id+1).zfill(3)
            n_cams = "1"
            path_images = "./MC-Calib/Data/intrinsics/"+cam_str+"/"
            path_save = "./MC-Calib/Data/intrinsics/"+cam_str+"/output/"

        else:
            n_cams = str(len(list(os.listdir(os.path.join(script_dir,"Data","images","calibration")))))
            path_images = "./MC-Calib/Data/images/calibration/"
            path_save = "./MC-Calib/Data/output/"

        # n cams
        print("Setting "+n_cams+" number of cameras")
        with open(yml_board, 'r') as file:
            data = file.readlines()
        n = data[23].split("  # number of cameras in the rig to calibrate")[0].split()[1]
        data[23] = data[23].replace(n, n_cams)

        # images
        n = data[31].split("root_path: ")[1].split('"')[1]
        data[31] = data[31].replace(n, path_images)
        with open(yml_board, 'w') as file:
            file.writelines( data )

        # output
        n = data[42].split("save_path: ")[1].split('"')[1]
        data[42] = data[42].replace(n, path_save)
        with open(yml_board, 'w') as file:
            file.writelines( data )

        # fix intr
        n = data[28].split(" #if 1 then the intrinsic parameters will not be estimated nor refined (initial value needed)")[0].split(' ')[1]
        data[28] = data[28].replace(n, fix)
        with open(yml_board, 'w') as file:
            file.writelines( data )

        # fix intr path
        n = data[27].split(" # file with cameras intrinsics to initialize the intrinsic")[0].split(' ')[1]
        data[27] = data[27].replace(n, fix_path)
        with open(yml_board, 'w') as file:
            file.writelines( data )

    def generate_intr_yml( self ):

        path_intr = script_dir+"/Data/intrinsics/"
        cam_folders = [ os.path.join(path_intr,d) for d in list(os.listdir(path_intr)) if os.path.isdir(os.path.join(path_intr,d) ) ]
        cam_folders.sort()

        output_filename = path_intr+"/calibrated_cameras_data.yml"

        # Open the output file in write mode ('w' to overwrite any existing content)
        # file = open(output_filename, 'a')
        with open(output_filename, 'w') as outfile:
            for i,fname in enumerate(cam_folders):
                with open(fname+"/output/calibrated_cameras_data.yml", 'r') as infile:

                    if i!=0:
                        for _ in range(4):
                            next(infile, None)
                        outfile.write("camera_"+str(i)+":")
                        outfile.write('\n')
                    outfile.write(infile.read())


    def generate_data_for_calibration_blender( self ):
        launch_blender_script(self.blend_file, script_dir+"/generate_dataset_from_blender.py")

    def generate_data_for_calibration_basler( self, manual, dirname, intrinsics ):
        print("Generate calib data from Basler cameras\n")

        intr_str = ""
        if intrinsics: intr_str=" --intrinsics"

        if manual:
            # os.system("python3 "+script_dir+"/generate_dataset_from_basler.py")
            os.system("python3 "+script_dir+"/generate_dataset_from_basler.py --dirname "+dirname+intr_str)
        else:
            # os.system("python3 "+script_dir+"/generate_dataset_from_basler.py --automatic")
            os.system("python3 "+script_dir+"/generate_dataset_from_basler.py --automatic --dirname "+dirname+intr_str)

    def calibrate( self, fixed_intr=False ):
        print_hash("Calibration")
        self.update_yml( fixed_intr=fixed_intr)
        os.system(script_dir +"/calibrate.sh "+ self.cfg.charuco_board)


    def save_data( self  ):
        print_hash("Saving data to "+self.cfg.paths.save_dir)
        shutil.rmtree(self.cfg.paths.save_dir, ignore_errors=True)
        os.mkdir(self.cfg.paths.save_dir)

        data_out = os.path.abspath(os.path.join(self.cfg.paths.calib_dir, "src", "Data", "output"))
        data_img = os.path.abspath(os.path.join(self.cfg.paths.calib_dir, "src", "Data", "images"))
        conf_ori = os.path.abspath(os.path.join(self.cfg.paths.calib_dir, "src", "MC-Calib", "configs"))
        os.system("cp -r "+data_out+" "+os.path.join(self.cfg.paths.save_dir, "output"))
        os.system("cp -r "+data_img+" "+os.path.join(self.cfg.paths.save_dir, "images"))
        os.system("cp "+ os.path.join(conf_ori, "basler.yml") + " " +os.path.join(self.cfg.paths.save_dir, "output", "basler.yml") )
        os.system("cp "+ os.path.join(conf_ori, self.cfg.charuco_board) + " " + os.path.join(self.cfg.paths.save_dir, "output", self.cfg.charuco_board) )
        os.system("cp -r "+self.cfg.paths.scene_dir+" "+self.cfg.paths.save_scene )
        omegaconf.OmegaConf.save(config=self.cfg, f=os.path.join(self.cfg.paths.save_dir,"config.yaml"))
        

if __name__=="__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--config_path', default=config_default)
    parser.add_argument('--interactive', action='store_true')
    opt = parser.parse_args()

    p = program(opt)

    p.run()

    # if opt.interactive:
    #     p.run_interactive()
    # else:
    #     p.run_all()


